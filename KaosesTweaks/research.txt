
Helpful information:
### Bannerlord Modding Documentation:	
https://docs.bannerlordmodding.com/
### Harmony Patching Documentation:		
https://harmony.pardeike.net/articles/patching.html
### TaleWorlds Modding Forums:			
https://forums.taleworlds.com/index.php?pages/modding/
### Mount and Blade Discord:			
https://discordapp.com/invite/mountandblade
### TW Forum - Modding Discord:			
https://discordapp.com/invite/ykFVJGQ





## TempWorking
// TaleWorlds.CampaignSystem
// 
// Types:
// 
// AccompanyingCharacter
// ActionNotes
// AdjustedRandom
// AgeModel
// AiBehavior
// AiBehaviorScoreTuple
// AIBehaviorTuple
// AIState
// Army
// ArmyManagementCalculationModel
// AtmosphereGrid
// AtmosphereStateSortData
// AutoGeneratedSaveManager
// BanditDensityModel
// BanditLoopTestStatic
// BanditPartyComponent
// Barterable
// BarterData
// BarterGroup
// BarterManager
// BarterModel
// BarterResult
// BattleResultPartyData
// BattleRewardModel
// BattleSimulation
// BattleSimulationResult
// BattleSimulationResultArgs
// BribeCalculationModel
// Building
// BuildingConstructionModel
// BuildingEffectEnum
// BuildingEffectModel
// BuildingLocation
// BuildingScoreCalculationModel
// BuildingType
// Campaign
// CampaignBattleResult
// CampaignBehaviorBase
// CampaignBehaviorDataStore
// CampaignCheats
// CampaignCookieBase
// CampaignCraftingManager
// CampaignData
// CampaignEntityComponent
// CampaignEventDispatcher
// CampaignEventReceiver
// CampaignEvents
// CampaignGameMode
// CampaignGameStarter
// CampaignInformationManager
// CampaignManager
// CampaignMapConversation
// CampaignMission
// CampaignObjectBase
// CampaignObjectManager
// CampaignOptions
// CampaignSiegeTestStatic
// CampaignTime
// CampaignTimeControlMode
// CampaignWar
// CanUseDoor
// CaravanPartyComponent
// CastleEncounter
// CharacterDeveloperState
// CharacterDevelopmentModel
// CharacterFeats
// CharacterHasFaction
// CharacterObject
// CharacterPerks
// CharacterQuery
// CharacterRelationManager
// CharacterRestrictionFlags
// CharacterStatsModel
// CharacterTraits
// ChatNotificationType
// Clan
// ClanFinanceModel
// ClanPoliticsModel
// ClanState
// ClanTierModel
// CombatSimulationModel
// CombatXpModel
// CommonArea
// CommonAreaPartyComponent
// CompanionHiringPriceCalculationModel
// Concept
// ConversationCharacterData
// ConversationContext
// ConversationHelper
// ConversationManager
// ConversationSceneData
// ConversationSentence
// ConversationSentenceOption
// ConversationToken
// ConversationTokens
// CreateLocationCharacterDelegate
// CrimeModel
// CultureObject
// CultureTrait
// DailyTroopXpBonusModel
// DefaultBuildingTypes
// DefaultFeats
// DefaultIssueEffects
// DefaultPerks
// DefaultPolicies
// DefaultsBarterGroup
// DefaultSiegeStrategies
// DefaultSkillEffects
// DefaultTraits
// DefaultTroopSupplier
// DefaultVillageTypes
// DialogFlow
// DialogFlowContext
// DialogFlowLine
// DifficultyModel
// DiplomacyModel
// DisguiseDetectionModel
// DoNotAttackMainPartyCookie
// EducationCampaignBehavior
// EncounterGameMenuModel
// EventDelegateType
// ExplainedNumber
// FaceGenAttributeChangerModel
// FacesFemaleHair
// FacesMaleFacialHair
// FacesMaleHair
// FactionManager
// FactionManagerStancesData
// FakeInventoryListener
// FakeMarketData
// FeatObject
// Fief
// FiefBarterGroup
// FlattenedTroopRoster
// FlattenedTroopRosterElement
// GameContext
// GameContextEventType
// GameMenuEventHandler
// GameModels
// GameSceneDataManager
// GarrisonPartyComponent
// GenericTestStatics
// GenericXpModel
// GoldBarterGroup
// HeirSelectionCalculationModel
// Hero
// HeroCreator
// HeroDeathProbabilityCalculationModel
// HeroDeveloper
// HeroGetsBusyReasons
// HeroRelatedIssueCoolDownData
// HeroTraitDeveloper
// Hideout
// ICampaignBehavior
// ICampaignBehaviorManager
// ICampaignMapConversation
// ICampaignMission
// ICampaignMissionManager
// ICharacterDeveloperStateHandler
// IChatNotification
// IClanStateHandler
// IConversationStateHandler
// IDataStore
// IEncyclopediaLog
// IFaction
// IInventoryStateHandler
// IKingdomStateHandler
// ILocatable`1
// IMapEventVisual
// IMapEventVisualCreator
// IMapPoint
// IMapScene
// IMapSceneCreator
// IMapStateHandler
// IMarketData
// IMbEvent
// IMbEvent`1
// IMbEvent`2
// IMbEvent`3
// IMbEvent`4
// IMbEvent`5
// IMbEvent`6
// IMenuContextHandler
// IModuleManager
// ImportanceEnum
// INavigationHandler
// InfluenceCostType
// InventoryCapacityModel
// InventoryFinishDelegate
// InventoryItemType
// InventoryListener
// InventoryLogic
// InventoryManager
// InventoryMode
// InventoryState
// InventoryTransferItemEvent
// IObjectEnumerable`1
// IPartyScreenLogicHandler
// IPartyScreenTroopHandler
// IPartyVisual
// IPartyVisualCreator
// IPlayerTradeBehavior
// IQuestsStateHandler
// ISiegeEventSide
// ISiegeEventVisual
// ISiegeEventVisualCreator
// IssueBase
// IssueCoolDownData
// IssueEffect
// IssueManager
// IssueModel
// ItemBarterGroup
// ItemData
// ItemObjectExtensions
// ItemRoster
// Items
// ItemTuple
// ItemUsabilityModel
// ITournamentManager
// ITrackableCampaignObject
// Kingdom
// KingdomCreationModel
// KingdomDecisionPermissionModel
// KingdomManager
// KingdomState
// Location
// LocationCharacter
// LocationComplex
// LocationComplexTemplate
// LocationEncounter
// LocationModel
// LocatorGrid`1
// LogEntry
// LogEntryHistory
// LogImportanceType
// LootCollector
// LordPartyComponent
// LordPartyHourlyMilitaryThinkModel
// LordPartyHourlyPersonalThinkModel
// ManagedParameters
// ManagedParametersEnum
// MapConversationAgent
// MapDistanceModel
// MapEvent
// MapEventManager
// MapEventParty
// MapEventResultExplainer
// MapEventSide
// MapEventState
// MapState
// MapStateData
// MapTimeTracker
// MapTrackModel
// MapVisibilityListener
// MapVisibilityModel
// MapWeatherModel
// MarriageModel
// MBCampaignEvent
// MbEvent
// MbEvent`1
// MbEvent`2
// MbEvent`3
// MbEvent`4
// MbEvent`5
// MbEvent`6
// MBNotEnoughExperienceException
// MBNotEnoughGoldException
// MeetingSceneData
// MenuContext
// MetaDataExtensions
// MilitaryPowerModel
// MilitiaPartyComponent
// MinorFactionBase
// MobilePartiesAroundPositionList
// MobileParty
// MobilePartyFoodConsumptionModel
// MobilePartyMoraleModel
// MobilePartyVisualCache
// MoveModeType
// NameGenerator
// NavigationPermissionItem
// News
// NewsManager
// NewsUrgency
// NotablePowerModel
// NotableSpawnModel
// NumberChangedCallback
// Occupation
// OtherBarterGroup
// PartyAgentOrigin
// PartyAi
// PartyBase
// PartyComponent
// PartyFoodBuyingModel
// PartyGroupAgentOrigin
// PartyGroupTroopSupplier
// PartyHealingModel
// PartyImpairmentModel
// PartyMoraleModel
// PartyPresentationCancelButtonActivateDelegate
// PartyPresentationDoneButtonConditionDelegate
// PartyPresentationDoneButtonDelegate
// PartyScreenClosedDelegate
// PartyScreenData
// PartyScreenLogic
// PartyScreenManager
// PartyScreenMode
// PartyScreenPrisonHandler
// PartySizeLimitModel
// PartySpeedModel
// PartyState
// PartyTemplateObject
// PartyTemplateStack
// PartyThinkParams
// PartyTradeModel
// PartyTrainingModel
// PartyTroopUpgradeModel
// PartyUpgrader
// PartyWageModel
// PeriodicTickerData
// PeriodicTicker`1
// PerkObject
// PerkObjectResolver
// PersuasionModel
// PlayerCaptivity
// PlayerCaptivityModel
// PlayerEncounter
// PlayerEncounterState
// PlayerSiege
// PolicyObject
// PotentialIssueData
// PregnancyModel
// PrisonBreakModel
// PrisonerBarterGroup
// PrisonerDonationModel
// PrisonerRecruitmentCalculationModel
// QuestBase
// QuestManager
// QuestsState
// QuestTaskBase
// RaidModel
// RansomValueCalculationModel
// Romance
// RosterCollecter
// RosterCollector
// RosterTroopState
// SaveableCampaignTypeDefiner
// SaveHandler
// Settlement
// SettlementAccessModel
// SettlementArea
// SettlementComponent
// SettlementEconomyModel
// SettlementFoodModel
// SettlementGarrisonModel
// SettlementLoyaltyModel
// SettlementMilitiaModel
// SettlementProsperityModel
// SettlementSecurityModel
// SettlementTaxModel
// SettlementValueModel
// SiegeAftermathModel
// SiegeBombardTargets
// SiegeEvent
// SiegeEventManager
// SiegeEventModel
// SiegeStrategy
// SiegeStrategyActionModel
// SimpleAgentOrigin
// SingleplayerBattleSceneData
// SkillDescription
// SkillEffect
// SmithingModel
// StanceLink
// StanceType
// StartEncounterModel
// StatisticsDataLogHelper
// TargetScoreCalculatingModel
// TextObjectExtensions
// TournamentGame
// TournamentModel
// Town
// TownAmbushMissionResult
// TownEncounter
// TownMarketData
// Track
// TrackedObject
// TrackFlags
// TradeItemPriceFactorModel
// TradeRumor
// TradeSkill
// TraitObject
// TransferCommand
// TransferCommandResult
// TriggerDelegateType
// TroopProperty
// TroopRoster
// TroopRosterBase
// TroopRosterElement
// TroopSacrificeModel
// TroopTradeDifference
// TroopUpgradeTracker
// TutorialState
// ValuationModel
// Village
// VillageEncouter
// VillageMarketData
// VillageProductionCalculatorModel
// VillagerPartyComponent
// VillageType
// VisualCreator
// VisualTrackerManager
// VolunteerProductionModel
// WaitDelegate
// WaitMenuOption
// WallHitPointCalculationModel
// WarPartyComponent
// Workshop
// WorkshopModel
// WorkshopType






namespace TaleWorlds.CampaignSystem
{
	// Token: 0x020000C5 RID: 197
	public class BanditPartyComponent : WarPartyComponent

	
	// Token: 0x020002FF RID: 767
	public class DefaultBribeCalculationModel : BribeCalculationModel



// Token: 0x06000A65 RID: 2661 RVA: 0x00036ED8 File Offset: 0x000350D8
public void OnCraftingFinished()
{
	PartyBase.MainParty.ItemRoster.AddToCounts(this.ItemBeingCrafted, 1);
	TextObject textObject = GameTexts.FindText("crafting_added_to_inventory", null);
	textObject.SetCharacterProperties("PLAYER", Hero.MainHero.CharacterObject, null, false);
	textObject.SetTextVariable("ITEM_NAME", this.ItemBeingCrafted.Name);
	InformationManager.AddQuickInformation(textObject, 0, null, "");
	this.ItemBeingCrafted = null;
}


namespace TaleWorlds.CampaignSystem
{
	// Token: 0x02000062 RID: 98
	public class CampaignEvents : CampaignEventReceiver


namespace TaleWorlds.CampaignSystem.SandBox.GameComponents
{
	// Token: 0x020002CF RID: 719
	public class DefaultClanPoliticsModel : ClanPoliticsModel


namespace TaleWorlds.CampaignSystem.SandBox.GameComponents.Map
{
	// Token: 0x02000302 RID: 770
	public class DefaultCrimeModel : CrimeModel
	{
		// Token: 0x06002DAA RID: 11690 RVA: 0x000B70DF File Offset: 0x000B52DF



namespace TaleWorlds.CampaignSystem
{
	// Token: 0x0200007B RID: 123
	public sealed class CultureObject : BasicCultureObject



		// Token: 0x060019BA RID: 6586 RVA: 0x0006ECEC File Offset: 0x0006CEEC
		public void RegisterAll(Game game)


		// Token: 0x060019BB RID: 6587 RVA: 0x0006F4D0 File Offset: 0x0006D6D0
		public void InitializeAll(Game game)









namespace TaleWorlds.CampaignSystem.SandBox.GameComponents
{
	// Token: 0x020002CC RID: 716
	public class DefaultCharacterDevelopmentModel : CharacterDevelopmentModel

		// Token: 0x17000B0E RID: 2830
		// (get) Token: 0x06002BCF RID: 11215 RVA: 0x000A858B File Offset: 0x000A678B
		public override int AttributePointsAtStart
		{
			get
			{
				return 15;
			}
		}

		// Token: 0x17000B0F RID: 2831
		// (get) Token: 0x06002BD0 RID: 11216 RVA: 0x000A858F File Offset: 0x000A678F
		public override int LevelsPerAttributePoint
		{
			get
			{
				return 4;
			}
		}

		// Token: 0x17000B10 RID: 2832
		// (get) Token: 0x06002BD1 RID: 11217 RVA: 0x000A8592 File Offset: 0x000A6792
		public override int FocusPointsPerLevel
		{
			get
			{
				return 1;
			}
		}

		// Token: 0x17000B11 RID: 2833
		// (get) Token: 0x06002BD2 RID: 11218 RVA: 0x000A8595 File Offset: 0x000A6795
		public override int FocusPointsAtStart
		{
			get
			{
				return 5;
			}
		}

		// Token: 0x04000E8D RID: 3725
		private const int MaxCharacterLevels = 62;

		// Token: 0x04000E8E RID: 3726
		private const int MaxAttributeLevel = 11;

		// Token: 0x04000E8F RID: 3727
		private const int SkillPointsAtLevel1 = 1;

		// Token: 0x04000E90 RID: 3728
		private const int SkillPointsGainNeededInitialValue = 1000;

		// Token: 0x04000E91 RID: 3729
		private const int SkillPointsGainNeededIncreasePerLevel = 1000;

		// Token: 0x04000E92 RID: 3730
		private readonly int[] _skillsRequiredForLevel = new int[63];

		// Token: 0x04000E93 RID: 3731
		private const int FocusPointsPerLevelConst = 1;

		// Token: 0x04000E94 RID: 3732
		private const int LevelsPerAttributePointConst = 4;

		// Token: 0x04000E95 RID: 3733
		private const int FocusPointCostToOpenSkillConst = 0;

		// Token: 0x04000E96 RID: 3734
		private const int FocusPointsAtStartConst = 5;

		// Token: 0x04000E97 RID: 3735
		private const int AttributePointsAtStartConst = 15;

		// Token: 0x04000E98 RID: 3736
		private const int MaxSkillLevels = 1024;

		// Token: 0x04000E99 RID: 3737
		private readonly int[] _xpRequiredForSkillLevel = new int[1024];

		// Token: 0x04000E9A RID: 3738
		private const int XpRequirementForFirstLevel = 30;

		// Token: 0x04000E9B RID: 3739
		private const int MaxSkillPoint = 2147483647;

		// Token: 0x04000E9C RID: 3740
		private const int traitThreshold1 = 1000;

		// Token: 0x04000E9D RID: 3741
		private const int traitThreshold2 = 4000;

		// Token: 0x04000E9E RID: 3742
		private const int traitMaxValue1 = 2500;

		// Token: 0x04000E9F RID: 3743
		private const int traitMaxValue2 = 6000;










namespace TaleWorlds.Core
{
	// Token: 0x02000013 RID: 19
	[SaveableClass(10037)]
	public class BasicCharacterObject : MBObjectBase
	
namespace TaleWorlds.CampaignSystem
{
	// Token: 0x02000074 RID: 116
	[SaveableClass(20075)]
	public sealed class CharacterObject : BasicCharacterObject, ICharacterData





using System;
using Helpers;

namespace TaleWorlds.CampaignSystem.SandBox.GameComponents
{
	// Token: 0x020002EC RID: 748
	public class DefaultDailyTroopXpBonusModel : DailyTroopXpBonusModel
	{
		// Token: 0x06002CCF RID: 11471 RVA: 0x000AF5B5 File Offset: 0x000AD7B5
		public override int CalculateDailyTroopXpBonus(Town town)
		{
			return this.CalculateTroopXpBonusInternal(town);
		}

		// Token: 0x06002CD0 RID: 11472 RVA: 0x000AF5C0 File Offset: 0x000AD7C0
		private int CalculateTroopXpBonusInternal(Town town)
		{
			ExplainedNumber explainedNumber = new ExplainedNumber(0f, false, null);
			foreach (Building building in town.Buildings)
			{
				float buildingEffectAmount = building.GetBuildingEffectAmount(BuildingEffectEnum.Experience);
				if (buildingEffectAmount > 0f)
				{
					explainedNumber.Add(buildingEffectAmount, building.Name, null);
				}
			}
			PerkHelper.AddPerkBonusForTown(DefaultPerks.Leadership.RaiseTheMeek, town, ref explainedNumber);
			return (int)explainedNumber.ResultNumber;
		}

		// Token: 0x06002CD1 RID: 11473 RVA: 0x000AF650 File Offset: 0x000AD850
		public override float CalculateGarrisonXpBonusMultiplier(Town town)
		{
			return 1f;
		}
	}
}






namespace TaleWorlds.CampaignSystem.SandBox.GameComponents.Map
{
	// Token: 0x02000303 RID: 771
	public class DefaultDiplomacyModel : DiplomacyModel
	{



using System;

namespace TaleWorlds.CampaignSystem.SandBox.GameComponents
{
	// Token: 0x020002D3 RID: 723
	public class DefaultGenericXpModel : GenericXpModel
	{
		// Token: 0x06002C24 RID: 11300 RVA: 0x000AB32A File Offset: 0x000A952A
		public override float GetXpMultiplier(Hero hero)
		{
			return 1f;
		}
	}
}






using System;

namespace TaleWorlds.CampaignSystem.SandBox.GameComponents.Map
{
	// Token: 0x02000307 RID: 775
	public class DefaultHeroDeathProbabilityCalculationModel : HeroDeathProbabilityCalculationModel
	{
		// Token: 0x06002E02 RID: 11778 RVA: 0x000BB75E File Offset: 0x000B995E
		public override float CalculateHeroDeathProbability(Hero hero)
		{
			return this.CalculateHeroDeathProbabilityInternal(hero);
		}

		// Token: 0x06002E03 RID: 11779 RVA: 0x000BB768 File Offset: 0x000B9968
		private float CalculateHeroDeathProbabilityInternal(Hero hero)
		{
			float num = 0f;
			if (!CampaignOptions.IsLifeDeathCycleDisabled)
			{
				int becomeOldAge = Campaign.Current.Models.AgeModel.BecomeOldAge;
				int maxAge = Campaign.Current.Models.AgeModel.MaxAge;
				if (hero.Age > (float)becomeOldAge)
				{
					if (hero.Age < (float)maxAge && !hero.IsSpecial)
					{
						float num2 = 0.8f * ((hero.Age - (float)becomeOldAge) / (float)(Campaign.Current.Models.AgeModel.MaxAge - becomeOldAge));
						float num3 = 1f;
						if (hero.PartyBelongedTo != null && hero.PartyBelongedTo.HasPerk(DefaultPerks.Medicine.CheatDeath, true))
						{
							float secondaryBonus = DefaultPerks.Medicine.CheatDeath.SecondaryBonus;
							num3 += num3 * secondaryBonus * 0.01f;
						}
						float num4 = (float)(1.0 - Math.Pow((double)(1f - num2), 0.011904762126505375));
						num4 *= num3;
						num += num4;
					}
					else if (hero.Age >= (float)maxAge)
					{
						num += 1f;
					}
				}
			}
			return num;
		}
	}
}










using System;
using Helpers;
using TaleWorlds.Library;

namespace TaleWorlds.CampaignSystem.SandBox.GameComponents.Map
{
	// Token: 0x02000316 RID: 790
	public class DefaultPartyTrainingModel : PartyTrainingModel
	{
		// Token: 0x06002E7D RID: 11901 RVA: 0x000BF502 File Offset: 0x000BD702
		public override int GetMaxTrainedTroops(MobileParty mobileParty)
		{
			return 3;
		}

		// Token: 0x06002E7E RID: 11902 RVA: 0x000BF508 File Offset: 0x000BD708
		public override int GetHourlyUpgradeXpFromTraining(MobileParty party)
		{
			Settlement currentSettlement = party.CurrentSettlement;
			if (currentSettlement != null)
			{
				Town town = currentSettlement.Town;
			}
			ExplainedNumber explainedNumber = new ExplainedNumber(0f, false, null);
			return MBMath.Round(explainedNumber.ResultNumber);
		}

		// Token: 0x06002E7F RID: 11903 RVA: 0x000BF544 File Offset: 0x000BD744
		public override ExplainedNumber GetEffectiveDailyExperience(MobileParty mobileParty, TroopRosterElement troop)
		{
			ExplainedNumber result = default(ExplainedNumber);
			if (mobileParty.IsLordParty && !troop.Character.IsHero && (mobileParty.Army == null || mobileParty.Army.LeaderParty != MobileParty.MainParty) && mobileParty.MapEvent == null && (mobileParty.Party.Owner == null || mobileParty.Party.Owner.Clan != Clan.PlayerClan))
			{
				result.Add((float)(10 + troop.Character.Tier * 2), null, null);
			}
			if (mobileParty.IsActive && mobileParty.HasPerk(DefaultPerks.Leadership.CombatTips, false))
			{
				result.Add((float)this.GetPerkExperiencesForTroops(DefaultPerks.Leadership.CombatTips), null, null);
			}
			if (mobileParty.IsActive && mobileParty.HasPerk(DefaultPerks.Leadership.RaiseTheMeek, false) && troop.Character.Tier < 3)
			{
				result.Add((float)this.GetPerkExperiencesForTroops(DefaultPerks.Leadership.RaiseTheMeek), null, null);
			}
			if (mobileParty.IsGarrison)
			{
				Settlement currentSettlement = mobileParty.CurrentSettlement;
				if (((currentSettlement != null) ? currentSettlement.Town.Governor : null) != null && mobileParty.CurrentSettlement.Town.Governor.GetPerkValue(DefaultPerks.Bow.BullsEye))
				{
					result.Add((float)this.GetPerkExperiencesForTroops(DefaultPerks.Bow.BullsEye), null, null);
				}
			}
			if (mobileParty.IsActive && mobileParty.HasPerk(DefaultPerks.Polearm.Drills, true))
			{
				result.Add((float)this.GetPerkExperiencesForTroops(DefaultPerks.Polearm.Drills), null, null);
			}
			if (mobileParty.IsActive && mobileParty.HasPerk(DefaultPerks.OneHanded.MilitaryTradition, false) && troop.Character.IsInfantry)
			{
				result.Add((float)this.GetPerkExperiencesForTroops(DefaultPerks.OneHanded.MilitaryTradition), null, null);
			}
			if (mobileParty.IsActive && mobileParty.HasPerk(DefaultPerks.Athletics.WalkItOff, true) && !troop.Character.IsMounted && mobileParty.IsMoving)
			{
				result.Add((float)this.GetPerkExperiencesForTroops(DefaultPerks.Athletics.WalkItOff), null, null);
			}
			if (mobileParty.IsActive && mobileParty.HasPerk(DefaultPerks.Throwing.Saddlebags, true) && troop.Character.IsInfantry)
			{
				result.Add((float)this.GetPerkExperiencesForTroops(DefaultPerks.Throwing.Saddlebags), null, null);
			}
			if (mobileParty.IsActive && mobileParty.HasPerk(DefaultPerks.Athletics.AGoodDaysRest, true) && !troop.Character.IsMounted && !mobileParty.IsMoving && mobileParty.CurrentSettlement != null)
			{
				result.Add((float)this.GetPerkExperiencesForTroops(DefaultPerks.Athletics.AGoodDaysRest), null, null);
			}
			if (mobileParty.IsActive && mobileParty.HasPerk(DefaultPerks.Bow.Trainer, true) && troop.Character.IsArcher)
			{
				result.Add((float)this.GetPerkExperiencesForTroops(DefaultPerks.Bow.Trainer), null, null);
			}
			if (mobileParty.IsActive && mobileParty.HasPerk(DefaultPerks.Crossbow.RenownMarksmen, false) && troop.Character.IsArcher)
			{
				result.Add((float)this.GetPerkExperiencesForTroops(DefaultPerks.Crossbow.RenownMarksmen), null, null);
			}
			if (mobileParty.IsActive && mobileParty.IsMoving)
			{
				if (mobileParty.Morale > 75f)
				{
					PerkHelper.AddPerkBonusForParty(DefaultPerks.Scouting.ForcedMarch, mobileParty, false, ref result);
				}
				if (mobileParty.ItemRoster.TotalWeight > (float)mobileParty.InventoryCapacity)
				{
					PerkHelper.AddPerkBonusForParty(DefaultPerks.Scouting.Unburdened, mobileParty, false, ref result);
				}
			}
			if (mobileParty.IsActive && mobileParty.HasPerk(DefaultPerks.Steward.SevenVeterans, false) && troop.Character.Tier >= 4)
			{
				result.Add((float)this.GetPerkExperiencesForTroops(DefaultPerks.Steward.SevenVeterans), null, null);
			}
			if (mobileParty.IsActive && mobileParty.HasPerk(DefaultPerks.Steward.DrillSergant, false))
			{
				result.Add((float)this.GetPerkExperiencesForTroops(DefaultPerks.Steward.DrillSergant), null, null);
			}
			return result;
		}

		// Token: 0x06002E80 RID: 11904 RVA: 0x000BF8CC File Offset: 0x000BDACC
		private int GetPerkExperiencesForTroops(PerkObject perk)
		{
			if (perk == DefaultPerks.Leadership.CombatTips || perk == DefaultPerks.Leadership.RaiseTheMeek || perk == DefaultPerks.OneHanded.MilitaryTradition || perk == DefaultPerks.Crossbow.RenownMarksmen || perk == DefaultPerks.Steward.SevenVeterans || perk == DefaultPerks.Steward.DrillSergant)
			{
				return MathF.Round(perk.PrimaryBonus);
			}
			if (perk == DefaultPerks.Polearm.Drills || perk == DefaultPerks.Athletics.WalkItOff || perk == DefaultPerks.Athletics.AGoodDaysRest || perk == DefaultPerks.Bow.Trainer || perk == DefaultPerks.Bow.BullsEye || perk == DefaultPerks.Throwing.Saddlebags)
			{
				return MathF.Round(perk.SecondaryBonus);
			}
			return 0;
		}

		// Token: 0x06002E81 RID: 11905 RVA: 0x000BF954 File Offset: 0x000BDB54
		public override int GenerateSharedXp(CharacterObject troop, int xp, MobileParty mobileParty)
		{
			float num = (float)xp * 0.05f;
			if (troop.IsHero && !mobileParty.HasPerk(DefaultPerks.Leadership.LeaderOfMasses, true))
			{
				return 0;
			}
			if (troop.IsArcher && troop.IsRegular && mobileParty.HasPerk(DefaultPerks.Leadership.MakeADifference, true))
			{
				num += num * 0.01f * DefaultPerks.Leadership.MakeADifference.SecondaryBonus;
			}
			if (troop.IsMounted && troop.IsRegular && mobileParty.HasPerk(DefaultPerks.Leadership.LeadByExample, true))
			{
				num += num * 0.01f * DefaultPerks.Leadership.LeadByExample.SecondaryBonus;
			}
			return (int)num;
		}

		// Token: 0x06002E82 RID: 11906 RVA: 0x000BF9EC File Offset: 0x000BDBEC
		public override int CalculateXpGainFromBattles(FlattenedTroopRosterElement troopRosterElement, PartyBase party)
		{
			int num = troopRosterElement.XpGained;
			if ((party.MapEvent.IsPlayerSimulation || !party.MapEvent.IsPlayerMapEvent) && party.MobileParty.HasPerk(DefaultPerks.Leadership.TrustedCommander, true))
			{
				num += MBMath.Round((float)num * (DefaultPerks.Leadership.TrustedCommander.SecondaryBonus * 0.01f));
			}
			return num;
		}
	}
}



using System;

namespace TaleWorlds.CampaignSystem.SandBox.GameComponents
{
	// Token: 0x020002DD RID: 733
	public class DefaultPregnancyModel : PregnancyModel
	{
		// Token: 0x17000B21 RID: 2849
		// (get) Token: 0x06002C6A RID: 11370 RVA: 0x000AC6C0 File Offset: 0x000AA8C0
		public override float PregnancyDurationInDays
		{
			get
			{
				return 36f;
			}
		}

		// Token: 0x17000B22 RID: 2850
		// (get) Token: 0x06002C6B RID: 11371 RVA: 0x000AC6C7 File Offset: 0x000AA8C7
		public override float MaternalMortalityProbabilityInLabor
		{
			get
			{
				return 0.015f;
			}
		}

		// Token: 0x17000B23 RID: 2851
		// (get) Token: 0x06002C6C RID: 11372 RVA: 0x000AC6CE File Offset: 0x000AA8CE
		public override float StillbirthProbability
		{
			get
			{
				return 0.01f;
			}
		}

		// Token: 0x17000B24 RID: 2852
		// (get) Token: 0x06002C6D RID: 11373 RVA: 0x000AC6D5 File Offset: 0x000AA8D5
		public override float DeliveringFemaleOffspringProbability
		{
			get
			{
				return 0.51f;
			}
		}

		// Token: 0x17000B25 RID: 2853
		// (get) Token: 0x06002C6E RID: 11374 RVA: 0x000AC6DC File Offset: 0x000AA8DC
		public override float DeliveringTwinsProbability
		{
			get
			{
				return 0.03f;
			}
		}

		// Token: 0x06002C6F RID: 11375 RVA: 0x000AC6E3 File Offset: 0x000AA8E3
		private bool IsHeroAgeSuitableForPregnancy(Hero hero)
		{
			return hero.Age >= 18f && hero.Age <= 45f;
		}

		// Token: 0x06002C70 RID: 11376 RVA: 0x000AC704 File Offset: 0x000AA904
		public override float GetDailyChanceOfPregnancyForHero(Hero hero)
		{
			float result = 0f;
			if (hero.Spouse != null && this.IsHeroAgeSuitableForPregnancy(hero))
			{
				result = (1.2f - (hero.Age - 18f) * 0.04f) / (float)Math.Pow((double)(hero.Children.Count + 1), 2.0) * 0.2f;
			}
			return result;
		}

		// Token: 0x04000ED4 RID: 3796
		private const int MinPregnancyAge = 18;

		// Token: 0x04000ED5 RID: 3797
		private const int MaxPregnancyAge = 45;
	}
}









namespace TaleWorlds.CampaignSystem.SandBox.CampaignBehaviors
{
	// Token: 0x0200036B RID: 875
	public class RomanceCampaignBehavior : CampaignBehaviorBase
	{
		// Token: 0x17000B6F RID: 2927






using System;
using System.Collections.Generic;
using TaleWorlds.Core;
using TaleWorlds.Library;

namespace TaleWorlds.CampaignSystem.SandBox.GameComponents.Map
{
	// Token: 0x0200031A RID: 794
	public class DefaultSmithingModel : SmithingModel
	{
		// Token: 0x06002EB6 RID: 11958 RVA: 0x000C0CDC File Offset: 0x000BEEDC
		public override Crafting.OverrideData GetModifierChanges(int modifierTier)
		{
			int pointsToModify = this.GetPointsToModify(modifierTier);
			if (pointsToModify != 0)
			{
				return this.ModifyWeaponDesign(pointsToModify);
			}
			return new Crafting.OverrideData(0f, 0, 0, 0, 0);
		}

		// Token: 0x06002EB7 RID: 11959 RVA: 0x000C0D0C File Offset: 0x000BEF0C
		private Crafting.OverrideData ModifyWeaponDesign(int numPoints)
		{
			Crafting.OverrideData overrideData = new Crafting.OverrideData(0f, 0, 0, 0, 0);
			int num = 0;
			int num2 = 0;
			while (num2 != numPoints && num < 500)
			{
				int num3 = (numPoints > 0) ? 1 : -1;
				if (MBRandom.RandomFloat < 0.1f)
				{
					num3 = -num3;
				}
				float randomFloat = MBRandom.RandomFloat;
				if (randomFloat < 0.2f)
				{
					overrideData.SwingSpeedOverriden += num3;
				}
				else if (randomFloat < 0.4f)
				{
					overrideData.SwingDamageOverriden += num3;
				}
				else if (randomFloat < 0.6f)
				{
					overrideData.ThrustSpeedOverriden += num3;
				}
				else if (randomFloat < 0.8f)
				{
					overrideData.ThrustDamageOverriden += num3;
				}
				else
				{
					overrideData.Handling += num3;
				}
				num++;
				num2 = overrideData.SwingSpeedOverriden + overrideData.SwingDamageOverriden + overrideData.ThrustSpeedOverriden + overrideData.ThrustDamageOverriden + overrideData.Handling;
			}
			return overrideData;
		}

		// Token: 0x06002EB8 RID: 11960 RVA: 0x000C0DF9 File Offset: 0x000BEFF9
		private int GetPointsToModify(int modifierTier)
		{
			if (modifierTier <= -4)
			{
				return -8;
			}
			if (modifierTier == -3)
			{
				return -6;
			}
			if (modifierTier == -2)
			{
				return -4;
			}
			if (modifierTier == -1)
			{
				return -2;
			}
			if (modifierTier == 0)
			{
				return 0;
			}
			if (modifierTier == 1)
			{
				return 2;
			}
			if (modifierTier == 2)
			{
				return 5;
			}
			if (modifierTier != 3)
			{
				return 10;
			}
			return 10;
		}

		// Token: 0x06002EB9 RID: 11961 RVA: 0x000C0E34 File Offset: 0x000BF034
		public override int GetCraftingPartDifficulty(CraftingPiece craftingPiece)
		{
			return craftingPiece.PieceTier * 10;
		}

		// Token: 0x06002EBA RID: 11962 RVA: 0x000C0E40 File Offset: 0x000BF040
		public override int CalculateWeaponDesignDifficulty(WeaponDesign weaponDesign)
		{
			float num = 0f;
			float num2 = 1f;
			foreach (WeaponDesignElement weaponDesignElement in weaponDesign.UsedPieces)
			{
				num += (float)this.GetCraftingPartDifficulty(weaponDesignElement.CraftingPiece);
				num2 = Math.Max(num2, weaponDesignElement.ScaleFactor);
			}
			return MathF.Round(num * num2 * num2);
		}

		// Token: 0x06002EBB RID: 11963 RVA: 0x000C0E9C File Offset: 0x000BF09C
		public override int GetModifierTierForSmithedWeapon(WeaponDesign weaponDesign, Hero hero)
		{
			int num = this.CalculateWeaponDesignDifficulty(weaponDesign);
			int num2 = hero.CharacterObject.GetSkillValue(DefaultSkills.Crafting) - num;
			if (num2 < 0)
			{
				return this.GetPenaltyForLowSkill(num2);
			}
			float randomFloat = MBRandom.RandomFloat;
			if (hero.GetPerkValue(DefaultPerks.Crafting.ExperiencedSmith) && randomFloat < 0.2f)
			{
				return 1;
			}
			if (hero.GetPerkValue(DefaultPerks.Crafting.MasterSmith) && randomFloat >= 0.2f && randomFloat < 0.35f)
			{
				return 2;
			}
			if (hero.GetPerkValue(DefaultPerks.Crafting.LegendarySmith))
			{
				float num3 = 0.05f + Math.Max(0f, (float)(hero.GetSkillValue(DefaultSkills.Crafting) - 300)) * 0.01f;
				if (randomFloat > 0.5f && randomFloat < 0.5f + num3)
				{
					return 3;
				}
			}
			return 0;
		}

		// Token: 0x06002EBC RID: 11964 RVA: 0x000C0F58 File Offset: 0x000BF158
		private int GetPenaltyForLowSkill(int difference)
		{
			float num = MBRandom.RandomFloat;
			num += -0.01f * (float)difference;
			if (num < 0.4f)
			{
				return -1;
			}
			if (num < 0.7f)
			{
				return -2;
			}
			if (num < 0.9f)
			{
				return -3;
			}
			if (num >= 1f)
			{
				return -5;
			}
			return -4;
		}

		// Token: 0x06002EBD RID: 11965 RVA: 0x000C0FA3 File Offset: 0x000BF1A3
		private float GetDifficultyForElement(WeaponDesignElement weaponDesignElement)
		{
			return (float)weaponDesignElement.CraftingPiece.PieceTier * (1f + 0.5f * weaponDesignElement.ScaleFactor);
		}

		// Token: 0x06002EBE RID: 11966 RVA: 0x000C0FC4 File Offset: 0x000BF1C4
		public override IEnumerable<Crafting.RefiningFormula> GetRefiningFormulas(Hero weaponsmith)
		{
			yield return new Crafting.RefiningFormula(CraftingMaterials.Wood, 2, CraftingMaterials.Iron1, 0, CraftingMaterials.Charcoal, 1, CraftingMaterials.IronOre, 0);
			if (weaponsmith.GetPerkValue(DefaultPerks.Crafting.CharcoalMaker))
			{
				yield return new Crafting.RefiningFormula(CraftingMaterials.Wood, 2, CraftingMaterials.Iron1, 0, CraftingMaterials.Charcoal, 3, CraftingMaterials.IronOre, 0);
			}
			yield return new Crafting.RefiningFormula(CraftingMaterials.IronOre, 1, CraftingMaterials.Charcoal, 1, CraftingMaterials.Iron1, weaponsmith.GetPerkValue(DefaultPerks.Crafting.IronMaker) ? 3 : 2, CraftingMaterials.IronOre, 0);
			yield return new Crafting.RefiningFormula(CraftingMaterials.Iron1, 1, CraftingMaterials.Charcoal, 1, CraftingMaterials.Iron2, 1, CraftingMaterials.IronOre, 0);
			yield return new Crafting.RefiningFormula(CraftingMaterials.Iron2, 2, CraftingMaterials.Charcoal, 1, CraftingMaterials.Iron3, 1, CraftingMaterials.Iron1, 1);
			if (weaponsmith.GetPerkValue(DefaultPerks.Crafting.SteelMaker))
			{
				yield return new Crafting.RefiningFormula(CraftingMaterials.Iron3, 2, CraftingMaterials.Charcoal, 1, CraftingMaterials.Iron4, 1, CraftingMaterials.Iron1, 1);
			}
			if (weaponsmith.GetPerkValue(DefaultPerks.Crafting.SteelMaker2))
			{
				yield return new Crafting.RefiningFormula(CraftingMaterials.Iron4, 2, CraftingMaterials.Charcoal, 1, CraftingMaterials.Iron5, 1, CraftingMaterials.Iron1, 1);
			}
			if (weaponsmith.GetPerkValue(DefaultPerks.Crafting.SteelMaker3))
			{
				yield return new Crafting.RefiningFormula(CraftingMaterials.Iron5, 2, CraftingMaterials.Charcoal, 1, CraftingMaterials.Iron6, 1, CraftingMaterials.Iron1, 1);
			}
			yield break;
		}

		// Token: 0x06002EBF RID: 11967 RVA: 0x000C0FD4 File Offset: 0x000BF1D4
		public override int GetSkillXpForRefining(ref Crafting.RefiningFormula refineFormula)
		{
			return MathF.Round(0.3f * (float)(this.GetCraftingMaterialItem(refineFormula.Output).Value * refineFormula.OutputCount));
		}

		// Token: 0x06002EC0 RID: 11968 RVA: 0x000C0FFC File Offset: 0x000BF1FC
		public override int GetSkillXpForSmelting(ItemObject item)
		{
			return MathF.Round(0.02f * (float)item.Value);
		}

		// Token: 0x06002EC1 RID: 11969 RVA: 0x000C1010 File Offset: 0x000BF210
		public override int GetSkillXpForSmithing(ItemObject item)
		{
			return MathF.Round(0.1f * (float)item.Value);
		}

		// Token: 0x06002EC2 RID: 11970 RVA: 0x000C1024 File Offset: 0x000BF224
		public override int GetEnergyCostForRefining(ref Crafting.RefiningFormula refineFormula, Hero hero)
		{
			int num = 6;
			if (hero.GetPerkValue(DefaultPerks.Crafting.PracticalRefiner))
			{
				num = (num + 1) / 2;
			}
			return num;
		}

		// Token: 0x06002EC3 RID: 11971 RVA: 0x000C1048 File Offset: 0x000BF248
		public override int GetEnergyCostForSmithing(ItemObject item, Hero hero)
		{
			int num = (int)(10 + ItemObject.ItemTiers.Tier6 * item.Tier);
			if (hero.GetPerkValue(DefaultPerks.Crafting.PracticalSmith))
			{
				num = (num + 1) / 2;
			}
			return num;
		}

		// Token: 0x06002EC4 RID: 11972 RVA: 0x000C1078 File Offset: 0x000BF278
		public override int GetEnergyCostForSmelting(ItemObject item, Hero hero)
		{
			int num = 10;
			if (hero.GetPerkValue(DefaultPerks.Crafting.PracticalSmelter))
			{
				num = (num + 1) / 2;
			}
			return num;
		}

		// Token: 0x06002EC5 RID: 11973 RVA: 0x000C109C File Offset: 0x000BF29C
		public override ItemObject GetCraftingMaterialItem(CraftingMaterials craftingMaterial)
		{
			switch (craftingMaterial)
			{
			case CraftingMaterials.IronOre:
				return DefaultItems.IronOre;
			case CraftingMaterials.Iron1:
				return DefaultItems.IronIngot1;
			case CraftingMaterials.Iron2:
				return DefaultItems.IronIngot2;
			case CraftingMaterials.Iron3:
				return DefaultItems.IronIngot3;
			case CraftingMaterials.Iron4:
				return DefaultItems.IronIngot4;
			case CraftingMaterials.Iron5:
				return DefaultItems.IronIngot5;
			case CraftingMaterials.Iron6:
				return DefaultItems.IronIngot6;
			case CraftingMaterials.Wood:
				return DefaultItems.HardWood;
			case CraftingMaterials.Charcoal:
				return DefaultItems.Charcoal;
			default:
				return DefaultItems.IronIngot1;
			}
		}

		// Token: 0x06002EC6 RID: 11974 RVA: 0x000C1110 File Offset: 0x000BF310
		public override int[] GetSmeltingOutputForItem(ItemObject item)
		{
			int[] array = new int[9];
			if (item.WeaponDesign != null)
			{
				foreach (WeaponDesignElement weaponDesignElement in item.WeaponDesign.UsedPieces)
				{
					if (weaponDesignElement != null && weaponDesignElement.IsValid)
					{
						foreach (ValueTuple<CraftingMaterials, int> valueTuple in weaponDesignElement.CraftingPiece.MaterialsUsed)
						{
							array[(int)valueTuple.Item1] += valueTuple.Item2;
						}
					}
				}
				this.AddSmeltingReductions(array);
			}
			return array;
		}

		// Token: 0x06002EC7 RID: 11975 RVA: 0x000C11C0 File Offset: 0x000BF3C0
		private void AddSmeltingReductions(int[] quantities)
		{
			if (quantities[6] > 0)
			{
				quantities[6]--;
				quantities[5]++;
			}
			else if (quantities[5] > 0)
			{
				quantities[5]--;
				quantities[4]++;
			}
			else if (quantities[4] > 0)
			{
				quantities[4]--;
				quantities[3]++;
			}
			else if (quantities[3] > 0)
			{
				quantities[3]--;
				quantities[2]++;
			}
			else if (quantities[2] > 0)
			{
				quantities[2]--;
				quantities[1]++;
			}
			quantities[8]--;
		}

		// Token: 0x06002EC8 RID: 11976 RVA: 0x000C1278 File Offset: 0x000BF478
		public override int[] GetSmithingCostsForWeaponDesign(WeaponDesign weaponDesign)
		{
			int[] array = new int[9];
			foreach (WeaponDesignElement weaponDesignElement in weaponDesign.UsedPieces)
			{
				if (weaponDesignElement != null && weaponDesignElement.IsValid)
				{
					foreach (ValueTuple<CraftingMaterials, int> valueTuple in weaponDesignElement.CraftingPiece.MaterialsUsed)
					{
						array[(int)valueTuple.Item1] -= valueTuple.Item2;
					}
				}
			}
			array[8]--;
			return array;
		}

		// Token: 0x06002EC9 RID: 11977 RVA: 0x000C131C File Offset: 0x000BF51C
		public override int ResearchPointsNeedForNewPart(int count)
		{
			return (count * count + 12) / 4;
		}

		// Token: 0x06002ECA RID: 11978 RVA: 0x000C1326 File Offset: 0x000BF526
		public override float GetProbabalityToOpenPart(CraftingPiece craftingPiece)
		{
			return 1f / (float)((1 + craftingPiece.PieceTier) * (1 + craftingPiece.PieceTier));
		}

		// Token: 0x06002ECB RID: 11979 RVA: 0x000C1340 File Offset: 0x000BF540
		public override int GetPartResearchGainForSmeltingItem(ItemObject item, Hero hero)
		{
			int num = 1 + MathF.Round(0.02f * (float)item.Value);
			if (hero.GetPerkValue(DefaultPerks.Crafting.CuriousSmelter))
			{
				num *= 2;
			}
			return num;
		}

		// Token: 0x06002ECC RID: 11980 RVA: 0x000C1374 File Offset: 0x000BF574
		public override int GetPartResearchGainForSmithingItem(ItemObject item, Hero hero)
		{
			int num = 1 + MathF.Floor(0.1f * (float)item.Value);
			if (hero.GetPerkValue(DefaultPerks.Crafting.CuriousSmith))
			{
				num *= 2;
			}
			return num;
		}
	}
}







namespace TaleWorlds.CampaignSystem.SandBox.GameComponents
{
	// Token: 0x020002E9 RID: 745
	public class DefaultWorkshopModel : WorkshopModel
	{
		// Token: 0x17000B26 RID: 2854


































		// Token: 0x06001129 RID: 4393 RVA: 0x0004DB9C File Offset: 0x0004BD9C
		private void FillPartyStacks(PartyTemplateObject pt, int troopNumberLimit = -1)
		{
			if (this.IsBandit)
			{
				float gameProcess = MiscHelper.GetGameProcess();
				float num = 0.4f + 0.8f * gameProcess;
				int num2 = MBRandom.RandomInt(2);
				float num3 = (num2 == 0) ? MBRandom.RandomFloat : (MBRandom.RandomFloat * MBRandom.RandomFloat * MBRandom.RandomFloat * 4f);
				float num4 = (num2 == 0) ? (num3 * 0.8f + 0.2f) : (1f + num3);
				float randomFloat = MBRandom.RandomFloat;
				float randomFloat2 = MBRandom.RandomFloat;
				float randomFloat3 = MBRandom.RandomFloat;
				float f = (pt.Stacks.Count > 0) ? ((float)pt.Stacks[0].MinValue + num * num4 * randomFloat * (float)(pt.Stacks[0].MaxValue - pt.Stacks[0].MinValue)) : 0f;
				float f2 = (pt.Stacks.Count > 1) ? ((float)pt.Stacks[1].MinValue + num * num4 * randomFloat2 * (float)(pt.Stacks[1].MaxValue - pt.Stacks[1].MinValue)) : 0f;
				float f3 = (pt.Stacks.Count > 2) ? ((float)pt.Stacks[2].MinValue + num * num4 * randomFloat3 * (float)(pt.Stacks[2].MaxValue - pt.Stacks[2].MinValue)) : 0f;
				this.AddElementToMemberRoster(pt.Stacks[0].Character, MBRandom.RoundRandomized(f), false);
				if (pt.Stacks.Count > 1)
				{
					this.AddElementToMemberRoster(pt.Stacks[1].Character, MBRandom.RoundRandomized(f2), false);
				}
				if (pt.Stacks.Count > 2)
				{
					this.AddElementToMemberRoster(pt.Stacks[2].Character, MBRandom.RoundRandomized(f3), false);
					return;
				}
			}
			else
			{
				if (this.IsVillager)
				{
					for (int i = 0; i < pt.Stacks.Count; i++)
					{
						CharacterObject character = pt.Stacks[0].Character;
						this.AddElementToMemberRoster(character, troopNumberLimit, false);
					}
					return;
				}
				if (troopNumberLimit < 0)
				{
					float gameProcess2 = MiscHelper.GetGameProcess();
					for (int j = 0; j < pt.Stacks.Count; j++)
					{
						int numberToAdd = (int)(gameProcess2 * (float)(pt.Stacks[j].MaxValue - pt.Stacks[j].MinValue)) + pt.Stacks[j].MinValue;
						CharacterObject character2 = pt.Stacks[j].Character;
						this.AddElementToMemberRoster(character2, numberToAdd, false);
					}
					return;
				}
				for (int k = 0; k < troopNumberLimit; k++)
				{
					int num5 = -1;
					float num6 = 0f;
					for (int l = 0; l < pt.Stacks.Count; l++)
					{
						num6 += ((this.IsGarrison && pt.Stacks[l].Character.IsArcher) ? 6f : ((this.IsGarrison && !pt.Stacks[l].Character.IsMounted) ? 2f : 1f)) * ((float)(pt.Stacks[l].MaxValue + pt.Stacks[l].MinValue) / 2f);
					}
					float num7 = MBRandom.RandomFloat * num6;
					for (int m = 0; m < pt.Stacks.Count; m++)
					{
						num7 -= ((this.IsGarrison && pt.Stacks[m].Character.IsArcher) ? 6f : ((this.IsGarrison && !pt.Stacks[m].Character.IsMounted) ? 2f : 1f)) * ((float)(pt.Stacks[m].MaxValue + pt.Stacks[m].MinValue) / 2f);
						if (num7 < 0f)
						{
							num5 = m;
							break;
						}
					}
					if (num5 < 0)
					{
						num5 = 0;
					}
					CharacterObject character3 = pt.Stacks[num5].Character;
					this.AddElementToMemberRoster(character3, 1, false);
				}
			}
		}


ProduceOutput



			// Token: 0x06004755 RID: 18261 RVA: 0x0012B254 File Offset: 0x00129454
			private void ActivateBanditParty()
			{
				Settlement closestHideout = SettlementHelper.FindNearestSettlement((Settlement x) => x.IsHideout() && x.IsActive);
				Clan clan = Enumerable.FirstOrDefault<Clan>(Clan.BanditFactions, (Clan t) => t.Culture == closestHideout.Culture);
				this._questBanditMobileParty = BanditPartyComponent.CreateBanditParty("escort_caravan_quest_" + base.StringId, clan, closestHideout.Hideout, false);
				PartyTemplateObject partyTemplateObject = Campaign.Current.ObjectManager.GetObject<PartyTemplateObject>("kingdom_hero_party_caravan_ambushers") ?? clan.DefaultPartyTemplate;
				this._questBanditMobileParty.InitializeMobileParty(partyTemplateObject, this._questCaravanMobileParty.TargetSettlement.GatePosition, 1f, 0.5f, -1);
				this._questBanditMobileParty.SetCustomName(new TextObject("{=u1Pkt4HC}Raiders", null));
				Campaign.Current.MobilePartyLocator.UpdateParty(this._questBanditMobileParty);
				this._questBanditMobileParty.ActualClan = clan;
				this._questBanditMobileParty.Party.Owner = clan.Leader;
				this._questBanditMobileParty.HomeSettlement = closestHideout;
				this._questBanditMobileParty.MemberRoster.Clear();
				for (int i = 0; i < this.BanditPartyTroopCount; i++)
				{
					PartyTemplateStack partyTemplateStack = MBRandom.ChooseWeighted<PartyTemplateStack>(partyTemplateObject.Stacks, (PartyTemplateStack t) => (float)(64 - t.Character.Level));
					this._questBanditMobileParty.MemberRoster.AddToCounts(partyTemplateStack.Character, 1, false, 0, 0, true, -1);
				}
				this._questBanditMobileParty.ItemRoster.AddToCounts(DefaultItems.Grain, this.BanditPartyTroopCount);
				this._questBanditMobileParty.ItemRoster.AddToCounts(MBObjectManager.Instance.GetObject<ItemObject>("sumpter_horse"), this.BanditPartyTroopCount);
				this._questBanditMobileParty.IgnoreByOtherPartiesTill(base.QuestDueTime);
				SetPartyAiAction.GetActionForEngagingParty(this._questBanditMobileParty, this._questCaravanMobileParty);
				this._questBanditMobileParty.Ai.SetDoNotMakeNewDecisions(true);
				base.AddTrackedObject(this._questBanditMobileParty);
			}
























using System;
using System.Collections.Generic;
using TaleWorlds.Core;

namespace TaleWorlds.CampaignSystem
{
	// Token: 0x0200014F RID: 335
	public sealed class GameModels : GameModelsManager
	{
		// Token: 0x17000836 RID: 2102
		// (get) Token: 0x06001E05 RID: 7685 RVA: 0x000776A7 File Offset: 0x000758A7
		// (set) Token: 0x06001E06 RID: 7686 RVA: 0x000776AF File Offset: 0x000758AF
		public MapVisibilityModel MapVisibilityModel { get; private set; }

		// Token: 0x17000837 RID: 2103
		// (get) Token: 0x06001E07 RID: 7687 RVA: 0x000776B8 File Offset: 0x000758B8
		// (set) Token: 0x06001E08 RID: 7688 RVA: 0x000776C0 File Offset: 0x000758C0
		public MapVisibilityListener MapVisibilityListener { get; private set; }

		// Token: 0x17000838 RID: 2104
		// (get) Token: 0x06001E09 RID: 7689 RVA: 0x000776C9 File Offset: 0x000758C9
		// (set) Token: 0x06001E0A RID: 7690 RVA: 0x000776D1 File Offset: 0x000758D1
		public StartEncounterModel StartEncounterBehavior { get; private set; }

		// Token: 0x17000839 RID: 2105
		// (get) Token: 0x06001E0B RID: 7691 RVA: 0x000776DA File Offset: 0x000758DA
		// (set) Token: 0x06001E0C RID: 7692 RVA: 0x000776E2 File Offset: 0x000758E2
		public PartySpeedModel PartySpeedCalculatingModel { get; private set; }

		// Token: 0x1700083A RID: 2106
		// (get) Token: 0x06001E0D RID: 7693 RVA: 0x000776EB File Offset: 0x000758EB
		// (set) Token: 0x06001E0E RID: 7694 RVA: 0x000776F3 File Offset: 0x000758F3
		public PartyHealingModel PartyHealingModel { get; private set; }

		// Token: 0x1700083B RID: 2107
		// (get) Token: 0x06001E0F RID: 7695 RVA: 0x000776FC File Offset: 0x000758FC
		// (set) Token: 0x06001E10 RID: 7696 RVA: 0x00077704 File Offset: 0x00075904
		public PartyTrainingModel PartyTrainingModel { get; private set; }

		// Token: 0x1700083C RID: 2108
		// (get) Token: 0x06001E11 RID: 7697 RVA: 0x0007770D File Offset: 0x0007590D
		// (set) Token: 0x06001E12 RID: 7698 RVA: 0x00077715 File Offset: 0x00075915
		public BarterModel BarterModel { get; private set; }

		// Token: 0x1700083D RID: 2109
		// (get) Token: 0x06001E13 RID: 7699 RVA: 0x0007771E File Offset: 0x0007591E
		// (set) Token: 0x06001E14 RID: 7700 RVA: 0x00077726 File Offset: 0x00075926
		public PersuasionModel PersuasionModel { get; private set; }

		// Token: 0x1700083E RID: 2110
		// (get) Token: 0x06001E15 RID: 7701 RVA: 0x0007772F File Offset: 0x0007592F
		// (set) Token: 0x06001E16 RID: 7702 RVA: 0x00077737 File Offset: 0x00075937
		public CombatSimulationModel CombatSimulationModel { get; private set; }

		// Token: 0x1700083F RID: 2111
		// (get) Token: 0x06001E17 RID: 7703 RVA: 0x00077740 File Offset: 0x00075940
		// (set) Token: 0x06001E18 RID: 7704 RVA: 0x00077748 File Offset: 0x00075948
		public CombatXpModel CombatXpModel { get; private set; }

		// Token: 0x17000840 RID: 2112
		// (get) Token: 0x06001E19 RID: 7705 RVA: 0x00077751 File Offset: 0x00075951
		// (set) Token: 0x06001E1A RID: 7706 RVA: 0x00077759 File Offset: 0x00075959
		public GenericXpModel GenericXpModel { get; private set; }

		// Token: 0x17000841 RID: 2113
		// (get) Token: 0x06001E1B RID: 7707 RVA: 0x00077762 File Offset: 0x00075962
		// (set) Token: 0x06001E1C RID: 7708 RVA: 0x0007776A File Offset: 0x0007596A
		public SmithingModel SmithingModel { get; private set; }

		// Token: 0x17000842 RID: 2114
		// (get) Token: 0x06001E1D RID: 7709 RVA: 0x00077773 File Offset: 0x00075973
		// (set) Token: 0x06001E1E RID: 7710 RVA: 0x0007777B File Offset: 0x0007597B
		public PartyTradeModel PartyTradeModel { get; private set; }

		// Token: 0x17000843 RID: 2115
		// (get) Token: 0x06001E1F RID: 7711 RVA: 0x00077784 File Offset: 0x00075984
		// (set) Token: 0x06001E20 RID: 7712 RVA: 0x0007778C File Offset: 0x0007598C
		public RansomValueCalculationModel RansomValueCalculationModel { get; private set; }

		// Token: 0x17000844 RID: 2116
		// (get) Token: 0x06001E21 RID: 7713 RVA: 0x00077795 File Offset: 0x00075995
		// (set) Token: 0x06001E22 RID: 7714 RVA: 0x0007779D File Offset: 0x0007599D
		public RaidModel RaidModel { get; private set; }

		// Token: 0x17000845 RID: 2117
		// (get) Token: 0x06001E23 RID: 7715 RVA: 0x000777A6 File Offset: 0x000759A6
		// (set) Token: 0x06001E24 RID: 7716 RVA: 0x000777AE File Offset: 0x000759AE
		public MobilePartyFoodConsumptionModel MobilePartyFoodConsumptionModel { get; private set; }

		// Token: 0x17000846 RID: 2118
		// (get) Token: 0x06001E25 RID: 7717 RVA: 0x000777B7 File Offset: 0x000759B7
		// (set) Token: 0x06001E26 RID: 7718 RVA: 0x000777BF File Offset: 0x000759BF
		public PartyFoodBuyingModel PartyFoodBuyingModel { get; private set; }

		// Token: 0x17000847 RID: 2119
		// (get) Token: 0x06001E27 RID: 7719 RVA: 0x000777C8 File Offset: 0x000759C8
		// (set) Token: 0x06001E28 RID: 7720 RVA: 0x000777D0 File Offset: 0x000759D0
		public PartyImpairmentModel PartyImpairmentModel { get; private set; }

		// Token: 0x17000848 RID: 2120
		// (get) Token: 0x06001E29 RID: 7721 RVA: 0x000777D9 File Offset: 0x000759D9
		// (set) Token: 0x06001E2A RID: 7722 RVA: 0x000777E1 File Offset: 0x000759E1
		public PartyMoraleModel PartyMoraleModel { get; private set; }

		// Token: 0x17000849 RID: 2121
		// (get) Token: 0x06001E2B RID: 7723 RVA: 0x000777EA File Offset: 0x000759EA
		// (set) Token: 0x06001E2C RID: 7724 RVA: 0x000777F2 File Offset: 0x000759F2
		public DiplomacyModel DiplomacyModel { get; private set; }

		// Token: 0x1700084A RID: 2122
		// (get) Token: 0x06001E2D RID: 7725 RVA: 0x000777FB File Offset: 0x000759FB
		// (set) Token: 0x06001E2E RID: 7726 RVA: 0x00077803 File Offset: 0x00075A03
		public KingdomCreationModel KingdomCreationModel { get; private set; }

		// Token: 0x1700084B RID: 2123
		// (get) Token: 0x06001E2F RID: 7727 RVA: 0x0007780C File Offset: 0x00075A0C
		// (set) Token: 0x06001E30 RID: 7728 RVA: 0x00077814 File Offset: 0x00075A14
		public KingdomDecisionPermissionModel KingdomDecisionPermissionModel { get; private set; }

		// Token: 0x1700084C RID: 2124
		// (get) Token: 0x06001E31 RID: 7729 RVA: 0x0007781D File Offset: 0x00075A1D
		// (set) Token: 0x06001E32 RID: 7730 RVA: 0x00077825 File Offset: 0x00075A25
		public CharacterDevelopmentModel CharacterDevelopmentModel { get; private set; }

		// Token: 0x1700084D RID: 2125
		// (get) Token: 0x06001E33 RID: 7731 RVA: 0x0007782E File Offset: 0x00075A2E
		// (set) Token: 0x06001E34 RID: 7732 RVA: 0x00077836 File Offset: 0x00075A36
		public CharacterStatsModel CharacterStatsModel { get; private set; }

		// Token: 0x1700084E RID: 2126
		// (get) Token: 0x06001E35 RID: 7733 RVA: 0x0007783F File Offset: 0x00075A3F
		// (set) Token: 0x06001E36 RID: 7734 RVA: 0x00077847 File Offset: 0x00075A47
		public ItemUsabilityModel ItemUsabilityModel { get; private set; }

		// Token: 0x1700084F RID: 2127
		// (get) Token: 0x06001E37 RID: 7735 RVA: 0x00077850 File Offset: 0x00075A50
		// (set) Token: 0x06001E38 RID: 7736 RVA: 0x00077858 File Offset: 0x00075A58
		public ValuationModel ValuationModel { get; private set; }

		// Token: 0x17000850 RID: 2128
		// (get) Token: 0x06001E39 RID: 7737 RVA: 0x00077861 File Offset: 0x00075A61
		// (set) Token: 0x06001E3A RID: 7738 RVA: 0x00077869 File Offset: 0x00075A69
		public PartySizeLimitModel PartySizeLimitModel { get; private set; }

		// Token: 0x17000851 RID: 2129
		// (get) Token: 0x06001E3B RID: 7739 RVA: 0x00077872 File Offset: 0x00075A72
		// (set) Token: 0x06001E3C RID: 7740 RVA: 0x0007787A File Offset: 0x00075A7A
		public InventoryCapacityModel InventoryCapacityModel { get; private set; }

		// Token: 0x17000852 RID: 2130
		// (get) Token: 0x06001E3D RID: 7741 RVA: 0x00077883 File Offset: 0x00075A83
		// (set) Token: 0x06001E3E RID: 7742 RVA: 0x0007788B File Offset: 0x00075A8B
		public PartyWageModel PartyWageModel { get; private set; }

		// Token: 0x17000853 RID: 2131
		// (get) Token: 0x06001E3F RID: 7743 RVA: 0x00077894 File Offset: 0x00075A94
		// (set) Token: 0x06001E40 RID: 7744 RVA: 0x0007789C File Offset: 0x00075A9C
		public PlayerCaptivityModel PlayerCaptivityModel { get; private set; }

		// Token: 0x17000854 RID: 2132
		// (get) Token: 0x06001E41 RID: 7745 RVA: 0x000778A5 File Offset: 0x00075AA5
		// (set) Token: 0x06001E42 RID: 7746 RVA: 0x000778AD File Offset: 0x00075AAD
		public VillageProductionCalculatorModel VillageProductionCalculatorModel { get; private set; }

		// Token: 0x17000855 RID: 2133
		// (get) Token: 0x06001E43 RID: 7747 RVA: 0x000778B6 File Offset: 0x00075AB6
		// (set) Token: 0x06001E44 RID: 7748 RVA: 0x000778BE File Offset: 0x00075ABE
		public VolunteerProductionModel VolunteerProductionModel { get; private set; }

		// Token: 0x17000856 RID: 2134
		// (get) Token: 0x06001E45 RID: 7749 RVA: 0x000778C7 File Offset: 0x00075AC7
		// (set) Token: 0x06001E46 RID: 7750 RVA: 0x000778CF File Offset: 0x00075ACF
		public ArmyManagementCalculationModel ArmyManagementCalculationModel { get; private set; }

		// Token: 0x17000857 RID: 2135
		// (get) Token: 0x06001E47 RID: 7751 RVA: 0x000778D8 File Offset: 0x00075AD8
		// (set) Token: 0x06001E48 RID: 7752 RVA: 0x000778E0 File Offset: 0x00075AE0
		public BanditDensityModel BanditDensityModel { get; private set; }

		// Token: 0x17000858 RID: 2136
		// (get) Token: 0x06001E49 RID: 7753 RVA: 0x000778E9 File Offset: 0x00075AE9
		// (set) Token: 0x06001E4A RID: 7754 RVA: 0x000778F1 File Offset: 0x00075AF1
		public LordPartyHourlyPersonalThinkModel LordPartyHourlyPersonalThinkModel { get; private set; }

		// Token: 0x17000859 RID: 2137
		// (get) Token: 0x06001E4B RID: 7755 RVA: 0x000778FA File Offset: 0x00075AFA
		// (set) Token: 0x06001E4C RID: 7756 RVA: 0x00077902 File Offset: 0x00075B02
		public LordPartyHourlyMilitaryThinkModel LordPartyHourlyMilitaryThinkModel { get; private set; }

		// Token: 0x1700085A RID: 2138
		// (get) Token: 0x06001E4D RID: 7757 RVA: 0x0007790B File Offset: 0x00075B0B
		// (set) Token: 0x06001E4E RID: 7758 RVA: 0x00077913 File Offset: 0x00075B13
		public EncounterGameMenuModel EncounterGameMenuModel { get; private set; }

		// Token: 0x1700085B RID: 2139
		// (get) Token: 0x06001E4F RID: 7759 RVA: 0x0007791C File Offset: 0x00075B1C
		// (set) Token: 0x06001E50 RID: 7760 RVA: 0x00077924 File Offset: 0x00075B24
		public BattleRewardModel BattleRewardModel { get; private set; }

		// Token: 0x1700085C RID: 2140
		// (get) Token: 0x06001E51 RID: 7761 RVA: 0x0007792D File Offset: 0x00075B2D
		// (set) Token: 0x06001E52 RID: 7762 RVA: 0x00077935 File Offset: 0x00075B35
		public MapTrackModel MapTrackModel { get; private set; }

		// Token: 0x1700085D RID: 2141
		// (get) Token: 0x06001E53 RID: 7763 RVA: 0x0007793E File Offset: 0x00075B3E
		// (set) Token: 0x06001E54 RID: 7764 RVA: 0x00077946 File Offset: 0x00075B46
		public MapDistanceModel MapDistanceModel { get; private set; }

		// Token: 0x1700085E RID: 2142
		// (get) Token: 0x06001E55 RID: 7765 RVA: 0x0007794F File Offset: 0x00075B4F
		// (set) Token: 0x06001E56 RID: 7766 RVA: 0x00077957 File Offset: 0x00075B57
		public MapWeatherModel MapWeatherModel { get; private set; }

		// Token: 0x1700085F RID: 2143
		// (get) Token: 0x06001E57 RID: 7767 RVA: 0x00077960 File Offset: 0x00075B60
		// (set) Token: 0x06001E58 RID: 7768 RVA: 0x00077968 File Offset: 0x00075B68
		public FaceGenAttributeChangerModel FaceGenAttributeChangerModel { get; private set; }

		// Token: 0x17000860 RID: 2144
		// (get) Token: 0x06001E59 RID: 7769 RVA: 0x00077971 File Offset: 0x00075B71
		// (set) Token: 0x06001E5A RID: 7770 RVA: 0x00077979 File Offset: 0x00075B79
		public TargetScoreCalculatingModel TargetScoreCalculatingModel { get; private set; }

		// Token: 0x17000861 RID: 2145
		// (get) Token: 0x06001E5B RID: 7771 RVA: 0x00077982 File Offset: 0x00075B82
		// (set) Token: 0x06001E5C RID: 7772 RVA: 0x0007798A File Offset: 0x00075B8A
		public TradeItemPriceFactorModel TradeItemPriceFactorModel { get; private set; }

		// Token: 0x17000862 RID: 2146
		// (get) Token: 0x06001E5D RID: 7773 RVA: 0x00077993 File Offset: 0x00075B93
		// (set) Token: 0x06001E5E RID: 7774 RVA: 0x0007799B File Offset: 0x00075B9B
		public SettlementEconomyModel SettlementConsumptionModel { get; private set; }

		// Token: 0x17000863 RID: 2147
		// (get) Token: 0x06001E5F RID: 7775 RVA: 0x000779A4 File Offset: 0x00075BA4
		// (set) Token: 0x06001E60 RID: 7776 RVA: 0x000779AC File Offset: 0x00075BAC
		public SettlementFoodModel SettlementFoodModel { get; private set; }

		// Token: 0x17000864 RID: 2148
		// (get) Token: 0x06001E61 RID: 7777 RVA: 0x000779B5 File Offset: 0x00075BB5
		// (set) Token: 0x06001E62 RID: 7778 RVA: 0x000779BD File Offset: 0x00075BBD
		public SettlementValueModel SettlementValueModel { get; private set; }

		// Token: 0x17000865 RID: 2149
		// (get) Token: 0x06001E63 RID: 7779 RVA: 0x000779C6 File Offset: 0x00075BC6
		// (set) Token: 0x06001E64 RID: 7780 RVA: 0x000779CE File Offset: 0x00075BCE
		public SettlementMilitiaModel SettlementMilitiaModel { get; private set; }

		// Token: 0x17000866 RID: 2150
		// (get) Token: 0x06001E65 RID: 7781 RVA: 0x000779D7 File Offset: 0x00075BD7
		// (set) Token: 0x06001E66 RID: 7782 RVA: 0x000779DF File Offset: 0x00075BDF
		public SettlementLoyaltyModel SettlementLoyaltyModel { get; private set; }

		// Token: 0x17000867 RID: 2151
		// (get) Token: 0x06001E67 RID: 7783 RVA: 0x000779E8 File Offset: 0x00075BE8
		// (set) Token: 0x06001E68 RID: 7784 RVA: 0x000779F0 File Offset: 0x00075BF0
		public SettlementSecurityModel SettlementSecurityModel { get; private set; }

		// Token: 0x17000868 RID: 2152
		// (get) Token: 0x06001E69 RID: 7785 RVA: 0x000779F9 File Offset: 0x00075BF9
		// (set) Token: 0x06001E6A RID: 7786 RVA: 0x00077A01 File Offset: 0x00075C01
		public SettlementProsperityModel SettlementProsperityModel { get; private set; }

		// Token: 0x17000869 RID: 2153
		// (get) Token: 0x06001E6B RID: 7787 RVA: 0x00077A0A File Offset: 0x00075C0A
		// (set) Token: 0x06001E6C RID: 7788 RVA: 0x00077A12 File Offset: 0x00075C12
		public SettlementGarrisonModel SettlementGarrisonModel { get; private set; }

		// Token: 0x1700086A RID: 2154
		// (get) Token: 0x06001E6D RID: 7789 RVA: 0x00077A1B File Offset: 0x00075C1B
		// (set) Token: 0x06001E6E RID: 7790 RVA: 0x00077A23 File Offset: 0x00075C23
		public ClanTierModel ClanTierModel { get; private set; }

		// Token: 0x1700086B RID: 2155
		// (get) Token: 0x06001E6F RID: 7791 RVA: 0x00077A2C File Offset: 0x00075C2C
		// (set) Token: 0x06001E70 RID: 7792 RVA: 0x00077A34 File Offset: 0x00075C34
		public ClanPoliticsModel ClanPoliticsModel { get; private set; }

		// Token: 0x1700086C RID: 2156
		// (get) Token: 0x06001E71 RID: 7793 RVA: 0x00077A3D File Offset: 0x00075C3D
		// (set) Token: 0x06001E72 RID: 7794 RVA: 0x00077A45 File Offset: 0x00075C45
		public ClanFinanceModel ClanFinanceModel { get; private set; }

		// Token: 0x1700086D RID: 2157
		// (get) Token: 0x06001E73 RID: 7795 RVA: 0x00077A4E File Offset: 0x00075C4E
		// (set) Token: 0x06001E74 RID: 7796 RVA: 0x00077A56 File Offset: 0x00075C56
		public SettlementTaxModel SettlementTaxModel { get; private set; }

		// Token: 0x1700086E RID: 2158
		// (get) Token: 0x06001E75 RID: 7797 RVA: 0x00077A5F File Offset: 0x00075C5F
		// (set) Token: 0x06001E76 RID: 7798 RVA: 0x00077A67 File Offset: 0x00075C67
		public HeirSelectionCalculationModel HeirSelectionCalculationModel { get; private set; }

		// Token: 0x1700086F RID: 2159
		// (get) Token: 0x06001E77 RID: 7799 RVA: 0x00077A70 File Offset: 0x00075C70
		// (set) Token: 0x06001E78 RID: 7800 RVA: 0x00077A78 File Offset: 0x00075C78
		public HeroDeathProbabilityCalculationModel HeroDeathProbabilityCalculationModel { get; private set; }

		// Token: 0x17000870 RID: 2160
		// (get) Token: 0x06001E79 RID: 7801 RVA: 0x00077A81 File Offset: 0x00075C81
		// (set) Token: 0x06001E7A RID: 7802 RVA: 0x00077A89 File Offset: 0x00075C89
		public BuildingConstructionModel BuildingConstructionModel { get; private set; }

		// Token: 0x17000871 RID: 2161
		// (get) Token: 0x06001E7B RID: 7803 RVA: 0x00077A92 File Offset: 0x00075C92
		// (set) Token: 0x06001E7C RID: 7804 RVA: 0x00077A9A File Offset: 0x00075C9A
		public BuildingEffectModel BuildingEffectModel { get; private set; }

		// Token: 0x17000872 RID: 2162
		// (get) Token: 0x06001E7D RID: 7805 RVA: 0x00077AA3 File Offset: 0x00075CA3
		// (set) Token: 0x06001E7E RID: 7806 RVA: 0x00077AAB File Offset: 0x00075CAB
		public WallHitPointCalculationModel WallHitPointCalculationModel { get; private set; }

		// Token: 0x17000873 RID: 2163
		// (get) Token: 0x06001E7F RID: 7807 RVA: 0x00077AB4 File Offset: 0x00075CB4
		// (set) Token: 0x06001E80 RID: 7808 RVA: 0x00077ABC File Offset: 0x00075CBC
		public MarriageModel MarriageModel { get; private set; }

		// Token: 0x17000874 RID: 2164
		// (get) Token: 0x06001E81 RID: 7809 RVA: 0x00077AC5 File Offset: 0x00075CC5
		// (set) Token: 0x06001E82 RID: 7810 RVA: 0x00077ACD File Offset: 0x00075CCD
		public AgeModel AgeModel { get; private set; }

		// Token: 0x17000875 RID: 2165
		// (get) Token: 0x06001E83 RID: 7811 RVA: 0x00077AD6 File Offset: 0x00075CD6
		// (set) Token: 0x06001E84 RID: 7812 RVA: 0x00077ADE File Offset: 0x00075CDE
		public DailyTroopXpBonusModel DailyTroopXpBonusModel { get; private set; }

		// Token: 0x17000876 RID: 2166
		// (get) Token: 0x06001E85 RID: 7813 RVA: 0x00077AE7 File Offset: 0x00075CE7
		// (set) Token: 0x06001E86 RID: 7814 RVA: 0x00077AEF File Offset: 0x00075CEF
		public PregnancyModel PregnancyModel { get; private set; }

		// Token: 0x17000877 RID: 2167
		// (get) Token: 0x06001E87 RID: 7815 RVA: 0x00077AF8 File Offset: 0x00075CF8
		// (set) Token: 0x06001E88 RID: 7816 RVA: 0x00077B00 File Offset: 0x00075D00
		public NotablePowerModel NotablePowerModel { get; private set; }

		// Token: 0x17000878 RID: 2168
		// (get) Token: 0x06001E89 RID: 7817 RVA: 0x00077B09 File Offset: 0x00075D09
		// (set) Token: 0x06001E8A RID: 7818 RVA: 0x00077B11 File Offset: 0x00075D11
		public MilitaryPowerModel MilitaryPowerModel { get; private set; }

		// Token: 0x17000879 RID: 2169
		// (get) Token: 0x06001E8B RID: 7819 RVA: 0x00077B1A File Offset: 0x00075D1A
		// (set) Token: 0x06001E8C RID: 7820 RVA: 0x00077B22 File Offset: 0x00075D22
		public PrisonerDonationModel PrisonerDonationModel { get; private set; }

		// Token: 0x1700087A RID: 2170
		// (get) Token: 0x06001E8D RID: 7821 RVA: 0x00077B2B File Offset: 0x00075D2B
		// (set) Token: 0x06001E8E RID: 7822 RVA: 0x00077B33 File Offset: 0x00075D33
		public NotableSpawnModel NotableSpawnModel { get; private set; }

		// Token: 0x1700087B RID: 2171
		// (get) Token: 0x06001E8F RID: 7823 RVA: 0x00077B3C File Offset: 0x00075D3C
		// (set) Token: 0x06001E90 RID: 7824 RVA: 0x00077B44 File Offset: 0x00075D44
		public TournamentModel TournamentModel { get; private set; }

		// Token: 0x1700087C RID: 2172
		// (get) Token: 0x06001E91 RID: 7825 RVA: 0x00077B4D File Offset: 0x00075D4D
		// (set) Token: 0x06001E92 RID: 7826 RVA: 0x00077B55 File Offset: 0x00075D55
		public CrimeModel CrimeModel { get; private set; }

		// Token: 0x1700087D RID: 2173
		// (get) Token: 0x06001E93 RID: 7827 RVA: 0x00077B5E File Offset: 0x00075D5E
		// (set) Token: 0x06001E94 RID: 7828 RVA: 0x00077B66 File Offset: 0x00075D66
		public DisguiseDetectionModel DisguiseDetectionModel { get; private set; }

		// Token: 0x1700087E RID: 2174
		// (get) Token: 0x06001E95 RID: 7829 RVA: 0x00077B6F File Offset: 0x00075D6F
		// (set) Token: 0x06001E96 RID: 7830 RVA: 0x00077B77 File Offset: 0x00075D77
		public BribeCalculationModel BribeCalculationModel { get; private set; }

		// Token: 0x1700087F RID: 2175
		// (get) Token: 0x06001E97 RID: 7831 RVA: 0x00077B80 File Offset: 0x00075D80
		// (set) Token: 0x06001E98 RID: 7832 RVA: 0x00077B88 File Offset: 0x00075D88
		public TroopSacrificeModel TroopSacrificeModel { get; private set; }

		// Token: 0x17000880 RID: 2176
		// (get) Token: 0x06001E99 RID: 7833 RVA: 0x00077B91 File Offset: 0x00075D91
		// (set) Token: 0x06001E9A RID: 7834 RVA: 0x00077B99 File Offset: 0x00075D99
		public SiegeStrategyActionModel SiegeStrategyActionModel { get; private set; }

		// Token: 0x17000881 RID: 2177
		// (get) Token: 0x06001E9B RID: 7835 RVA: 0x00077BA2 File Offset: 0x00075DA2
		// (set) Token: 0x06001E9C RID: 7836 RVA: 0x00077BAA File Offset: 0x00075DAA
		public SiegeEventModel SiegeEventModel { get; private set; }

		// Token: 0x17000882 RID: 2178
		// (get) Token: 0x06001E9D RID: 7837 RVA: 0x00077BB3 File Offset: 0x00075DB3
		// (set) Token: 0x06001E9E RID: 7838 RVA: 0x00077BBB File Offset: 0x00075DBB
		public SiegeAftermathModel SiegeAftermathModel { get; private set; }

		// Token: 0x17000883 RID: 2179
		// (get) Token: 0x06001E9F RID: 7839 RVA: 0x00077BC4 File Offset: 0x00075DC4
		// (set) Token: 0x06001EA0 RID: 7840 RVA: 0x00077BCC File Offset: 0x00075DCC
		public CompanionHiringPriceCalculationModel CompanionHiringPriceCalculationModel { get; private set; }

		// Token: 0x17000884 RID: 2180
		// (get) Token: 0x06001EA1 RID: 7841 RVA: 0x00077BD5 File Offset: 0x00075DD5
		// (set) Token: 0x06001EA2 RID: 7842 RVA: 0x00077BDD File Offset: 0x00075DDD
		public BuildingScoreCalculationModel BuildingScoreCalculationModel { get; private set; }

		// Token: 0x17000885 RID: 2181
		// (get) Token: 0x06001EA3 RID: 7843 RVA: 0x00077BE6 File Offset: 0x00075DE6
		// (set) Token: 0x06001EA4 RID: 7844 RVA: 0x00077BEE File Offset: 0x00075DEE
		public SettlementAccessModel SettlementAccessModel { get; private set; }

		// Token: 0x17000886 RID: 2182
		// (get) Token: 0x06001EA5 RID: 7845 RVA: 0x00077BF7 File Offset: 0x00075DF7
		// (set) Token: 0x06001EA6 RID: 7846 RVA: 0x00077BFF File Offset: 0x00075DFF
		public IssueModel IssueModel { get; private set; }

		// Token: 0x17000887 RID: 2183
		// (get) Token: 0x06001EA7 RID: 7847 RVA: 0x00077C08 File Offset: 0x00075E08
		// (set) Token: 0x06001EA8 RID: 7848 RVA: 0x00077C10 File Offset: 0x00075E10
		public PrisonerRecruitmentCalculationModel PrisonerRecruitmentCalculationModel { get; private set; }

		// Token: 0x17000888 RID: 2184
		// (get) Token: 0x06001EA9 RID: 7849 RVA: 0x00077C19 File Offset: 0x00075E19
		// (set) Token: 0x06001EAA RID: 7850 RVA: 0x00077C21 File Offset: 0x00075E21
		public PartyTroopUpgradeModel PartyTroopUpgradeModel { get; private set; }

		// Token: 0x17000889 RID: 2185
		// (get) Token: 0x06001EAB RID: 7851 RVA: 0x00077C2A File Offset: 0x00075E2A
		// (set) Token: 0x06001EAC RID: 7852 RVA: 0x00077C32 File Offset: 0x00075E32
		public WorkshopModel WorkshopModel { get; private set; }

		// Token: 0x1700088A RID: 2186
		// (get) Token: 0x06001EAD RID: 7853 RVA: 0x00077C3B File Offset: 0x00075E3B
		// (set) Token: 0x06001EAE RID: 7854 RVA: 0x00077C43 File Offset: 0x00075E43
		public DifficultyModel DifficultyModel { get; private set; }

		// Token: 0x1700088B RID: 2187
		// (get) Token: 0x06001EAF RID: 7855 RVA: 0x00077C4C File Offset: 0x00075E4C
		// (set) Token: 0x06001EB0 RID: 7856 RVA: 0x00077C54 File Offset: 0x00075E54
		public LocationModel LocationModel { get; private set; }

		// Token: 0x1700088C RID: 2188
		// (get) Token: 0x06001EB1 RID: 7857 RVA: 0x00077C5D File Offset: 0x00075E5D
		// (set) Token: 0x06001EB2 RID: 7858 RVA: 0x00077C65 File Offset: 0x00075E65
		public PrisonBreakModel PrisonBreakModel { get; private set; }

		// Token: 0x06001EB3 RID: 7859 RVA: 0x00077C70 File Offset: 0x00075E70
		private void GetSpecificGameBehaviors()
		{
			if (Campaign.Current.GameMode == CampaignGameMode.Campaign || Campaign.Current.GameMode == CampaignGameMode.Tutorial)
			{
				this.CharacterDevelopmentModel = base.GetGameModel<CharacterDevelopmentModel>();
				this.CharacterStatsModel = base.GetGameModel<CharacterStatsModel>();
				this.ItemUsabilityModel = base.GetGameModel<ItemUsabilityModel>();
				this.ValuationModel = base.GetGameModel<ValuationModel>();
				this.MapVisibilityModel = base.GetGameModel<MapVisibilityModel>();
				this.PlayerCaptivityModel = base.GetGameModel<PlayerCaptivityModel>();
				this.MapVisibilityListener = base.GetGameModel<MapVisibilityListener>();
				this.PartySpeedCalculatingModel = base.GetGameModel<PartySpeedModel>();
				this.PartyHealingModel = base.GetGameModel<PartyHealingModel>();
				this.PartyTrainingModel = base.GetGameModel<PartyTrainingModel>();
				this.PartyTradeModel = base.GetGameModel<PartyTradeModel>();
				this.RansomValueCalculationModel = base.GetGameModel<RansomValueCalculationModel>();
				this.RaidModel = base.GetGameModel<RaidModel>();
				this.CombatSimulationModel = base.GetGameModel<CombatSimulationModel>();
				this.CombatXpModel = base.GetGameModel<CombatXpModel>();
				this.GenericXpModel = base.GetGameModel<GenericXpModel>();
				this.SmithingModel = base.GetGameModel<SmithingModel>();
				this.MobilePartyFoodConsumptionModel = base.GetGameModel<MobilePartyFoodConsumptionModel>();
				this.PartyImpairmentModel = base.GetGameModel<PartyImpairmentModel>();
				this.PartyFoodBuyingModel = base.GetGameModel<PartyFoodBuyingModel>();
				this.PartyMoraleModel = base.GetGameModel<PartyMoraleModel>();
				this.DiplomacyModel = base.GetGameModel<DiplomacyModel>();
				this.KingdomCreationModel = base.GetGameModel<KingdomCreationModel>();
				this.KingdomDecisionPermissionModel = base.GetGameModel<KingdomDecisionPermissionModel>();
				this.VillageProductionCalculatorModel = base.GetGameModel<VillageProductionCalculatorModel>();
				this.VolunteerProductionModel = base.GetGameModel<VolunteerProductionModel>();
				this.ArmyManagementCalculationModel = base.GetGameModel<ArmyManagementCalculationModel>();
				this.BanditDensityModel = base.GetGameModel<BanditDensityModel>();
				this.LordPartyHourlyPersonalThinkModel = base.GetGameModel<LordPartyHourlyPersonalThinkModel>();
				this.LordPartyHourlyMilitaryThinkModel = base.GetGameModel<LordPartyHourlyMilitaryThinkModel>();
				this.EncounterGameMenuModel = base.GetGameModel<EncounterGameMenuModel>();
				this.BattleRewardModel = base.GetGameModel<BattleRewardModel>();
				this.MapTrackModel = base.GetGameModel<MapTrackModel>();
				this.MapDistanceModel = base.GetGameModel<MapDistanceModel>();
				this.MapWeatherModel = base.GetGameModel<MapWeatherModel>();
				this.TargetScoreCalculatingModel = base.GetGameModel<TargetScoreCalculatingModel>();
				this.PartySizeLimitModel = base.GetGameModel<PartySizeLimitModel>();
				this.PartyWageModel = base.GetGameModel<PartyWageModel>();
				this.InventoryCapacityModel = base.GetGameModel<InventoryCapacityModel>();
				this.TradeItemPriceFactorModel = base.GetGameModel<TradeItemPriceFactorModel>();
				this.SettlementValueModel = base.GetGameModel<SettlementValueModel>();
				this.SettlementConsumptionModel = base.GetGameModel<SettlementEconomyModel>();
				this.SettlementMilitiaModel = base.GetGameModel<SettlementMilitiaModel>();
				this.SettlementFoodModel = base.GetGameModel<SettlementFoodModel>();
				this.SettlementLoyaltyModel = base.GetGameModel<SettlementLoyaltyModel>();
				this.SettlementSecurityModel = base.GetGameModel<SettlementSecurityModel>();
				this.SettlementProsperityModel = base.GetGameModel<SettlementProsperityModel>();
				this.SettlementGarrisonModel = base.GetGameModel<SettlementGarrisonModel>();
				this.SettlementTaxModel = base.GetGameModel<SettlementTaxModel>();
				this.BarterModel = base.GetGameModel<BarterModel>();
				this.PersuasionModel = base.GetGameModel<PersuasionModel>();
				this.ClanTierModel = base.GetGameModel<ClanTierModel>();
				this.ClanPoliticsModel = base.GetGameModel<ClanPoliticsModel>();
				this.ClanFinanceModel = base.GetGameModel<ClanFinanceModel>();
				this.HeirSelectionCalculationModel = base.GetGameModel<HeirSelectionCalculationModel>();
				this.HeroDeathProbabilityCalculationModel = base.GetGameModel<HeroDeathProbabilityCalculationModel>();
				this.BuildingConstructionModel = base.GetGameModel<BuildingConstructionModel>();
				this.BuildingEffectModel = base.GetGameModel<BuildingEffectModel>();
				this.WallHitPointCalculationModel = base.GetGameModel<WallHitPointCalculationModel>();
				this.MarriageModel = base.GetGameModel<MarriageModel>();
				this.AgeModel = base.GetGameModel<AgeModel>();
				this.DailyTroopXpBonusModel = base.GetGameModel<DailyTroopXpBonusModel>();
				this.PregnancyModel = base.GetGameModel<PregnancyModel>();
				this.NotablePowerModel = base.GetGameModel<NotablePowerModel>();
				this.NotableSpawnModel = base.GetGameModel<NotableSpawnModel>();
				this.TournamentModel = base.GetGameModel<TournamentModel>();
				this.SiegeStrategyActionModel = base.GetGameModel<SiegeStrategyActionModel>();
				this.SiegeEventModel = base.GetGameModel<SiegeEventModel>();
				this.SiegeAftermathModel = base.GetGameModel<SiegeAftermathModel>();
				this.CrimeModel = base.GetGameModel<CrimeModel>();
				this.DisguiseDetectionModel = base.GetGameModel<DisguiseDetectionModel>();
				this.BribeCalculationModel = base.GetGameModel<BribeCalculationModel>();
				this.CompanionHiringPriceCalculationModel = base.GetGameModel<CompanionHiringPriceCalculationModel>();
				this.TroopSacrificeModel = base.GetGameModel<TroopSacrificeModel>();
				this.BuildingScoreCalculationModel = base.GetGameModel<BuildingScoreCalculationModel>();
				this.SettlementAccessModel = base.GetGameModel<SettlementAccessModel>();
				this.IssueModel = base.GetGameModel<IssueModel>();
				this.PrisonerRecruitmentCalculationModel = base.GetGameModel<PrisonerRecruitmentCalculationModel>();
				this.PartyTroopUpgradeModel = base.GetGameModel<PartyTroopUpgradeModel>();
				this.WorkshopModel = base.GetGameModel<WorkshopModel>();
				this.DifficultyModel = base.GetGameModel<DifficultyModel>();
				this.LocationModel = base.GetGameModel<LocationModel>();
				this.MilitaryPowerModel = base.GetGameModel<MilitaryPowerModel>();
				this.PrisonerDonationModel = base.GetGameModel<PrisonerDonationModel>();
				this.PrisonBreakModel = base.GetGameModel<PrisonBreakModel>();
			}
			this.StartEncounterBehavior = base.GetGameModel<StartEncounterModel>();
			this.FaceGenAttributeChangerModel = base.GetGameModel<FaceGenAttributeChangerModel>();
		}

		// Token: 0x06001EB4 RID: 7860 RVA: 0x000780AE File Offset: 0x000762AE
		private void MakeGameComponentBindings()
		{
		}

		// Token: 0x06001EB5 RID: 7861 RVA: 0x000780B0 File Offset: 0x000762B0
		public GameModels(IEnumerable<GameModel> inputComponents) : base(inputComponents)
		{
			this.GetSpecificGameBehaviors();
			this.MakeGameComponentBindings();
		}
	}
}















namespace TaleWorlds.CampaignSystem.SandBox.CampaignBehaviors
{
	// Token: 0x02000325 RID: 805
	public class PregnancyCampaignBehavior : CampaignBehaviorBase

	
namespace GayMarriageMod.CampaignSystem
{
	// Token: 0x02000008 RID: 8
	[HarmonyPatch(typeof(PregnancyCampaignBehavior), "RefreshSpouseVisit")]
	public static class CheckForPregnancies
	{
		// Token: 0x06000014 RID: 20 RVA: 0x00002360 File Offset: 0x00000560
		private static bool CheckAreNearbyBase(PregnancyCampaignBehavior instance, Hero hero, Hero spouse)
		{
			return (bool)CheckForPregnancies.checkAreNearbyBase.Invoke(instance, new object[]
			{
				hero,
				spouse
			});
		}

		// Token: 0x06000015 RID: 21 RVA: 0x00002380 File Offset: 0x00000580
		private static void ChildConceivedBase(PregnancyCampaignBehavior instance, Hero mother)
		{
			CheckForPregnancies.childConceivedBase.Invoke(instance, new object[]
			{
				mother
			});
		}

		// Token: 0x06000016 RID: 22 RVA: 0x00002398 File Offset: 0x00000598
		public static bool Prefix(PregnancyCampaignBehavior __instance, Hero hero)
		{
			if (CheckForPregnancies.CheckAreNearbyBase(__instance, hero, hero.Spouse) && MBRandom.RandomFloat <= Campaign.Current.Models.PregnancyModel.GetDailyChanceOfPregnancyForHero(hero))
			{
				Hero hero2 = CheckForPregnancies.DetermineMother(hero, hero.Spouse);
				if (hero2 == null)
				{
					return false;
				}
				MakePregnantAction.Apply(hero2);
				CheckForPregnancies.ChildConceivedBase(__instance, hero2);
			}
			return false;
		}

		// Token: 0x06000017 RID: 23 RVA: 0x000023F0 File Offset: 0x000005F0
		private static Hero DetermineMother(Hero spouse1, Hero spouse2)
		{
			Config config = Config.InstanceOrDefault();
			if (spouse1.IsPregnant || spouse2.IsPregnant)
			{
				return null;
			}
			if ((!spouse1.IsHumanPlayerCharacter && !spouse2.IsHumanPlayerCharacter) || spouse1.IsFemale != spouse2.IsFemale || config == null || !config.Enabled)
			{
				bool isFemale = spouse1.IsFemale;
				bool isFemale2 = spouse2.IsFemale;
				if (isFemale)
				{
					if (!isFemale2)
					{
						return spouse1;
					}
				}
				else if (isFemale2)
				{
					return spouse2;
				}
				return null;
			}
			Hero result;
			switch (config.PregnancyMode)
			{
			case PregnancyMode.Player:
				result = (spouse1.IsHumanPlayerCharacter ? spouse1 : spouse2);
				break;
			case PregnancyMode.Partner:
				result = (spouse1.IsHumanPlayerCharacter ? spouse2 : spouse1);
				break;
			case PregnancyMode.Random:
				result = ((MBRandom.RandomInt(0, 1) == 0) ? spouse1 : spouse2);
				break;
			default:
				result = null;
				break;
			}
			return result;
		}

		// Token: 0x0400000A RID: 10
		private static readonly MethodInfo checkAreNearbyBase = AccessTools.Method(typeof(PregnancyCampaignBehavior), "CheckAreNearby", null, null);

		// Token: 0x0400000B RID: 11
		private static readonly MethodInfo childConceivedBase = AccessTools.Method(typeof(PregnancyCampaignBehavior), "ChildConceived", null, null);
	}









	
    /*        private static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)
                    {
                        List<CodeInstruction> list = new List<CodeInstruction>(instructions);
                        if (list.Count == 165)
                        {
                            list.RemoveRange(147, 3);
                        }
                        return list.AsEnumerable<CodeInstruction>();
                    }
            */
    /*public static void Postfix()
   {

                   if ((Factory.Settings is { } settings && settings.ProductionTweakEnabled))
                   {
                       if (Factory.Settings.SettlementsDebug)
                       {

                           IM.MessageDebug("DailyProductionAmount: original : " + __result.ToString() + "\r\n"
                               + " OtherTweakAmount " + settings.ProductionOtherTweakAmount.ToString() + "\r\n"
                               + " final " + (__result * settings.ProductionOtherTweakAmount).ToString() + "\r\n"
                               );
                       }
                       __result *= settings.ProductionOtherTweakAmount;
                   }

                   if  (Campaign.Current.AliveHeroes != null && Factory.Settings.WandererLocationDebug)
                   {
                       //Dictionary<Hero, string> wList = new Dictionary<Hero, string>();
                       Dictionary<string, string> wList = new Dictionary<string, string>();
                       foreach (Hero hero in Campaign.Current.AliveHeroes)
                       {
                           if (hero != null)
                           {
                               if (hero.CharacterObject.Occupation == Occupation.Wanderer && hero != null)
                               {
                                   if (hero.CurrentSettlement != null)
                                   {
                                       if (!wList.ContainsKey(hero.Name.ToString()))
                                       {
                                           wList.Add(hero.Name.ToString(), hero.CurrentSettlement.Name.ToString());
                                       }
                                       //IM.MessageDebug("Wanderer Name: " + hero.Name.ToString() + "   CurrentSettlement: " +hero.CurrentSettlement.Name.ToString());
                                   }
                               }
                           }
                       }

                       foreach (KeyValuePair<string, string> entry in wList)
                       {
                           IM.MessageDebug("Wanderer Name: " + entry.Key.ToString() + "   CurrentSettlement: " + entry.Value.ToString());
                       }
                   }
   }*/
    /*
   static bool Prepare() => Factory.Settings is { } settings && settings.UnlimitedWanderersPatch;
    }*/



